//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Assets/Use.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace UseCodeGenerator.Core.Use.SyntaxAnalizer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class UseParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, ABSTRACT=20, ASSOCIATION=21, ATTRIBUTES=22, BEGIN=23, 
		BETWEEN=24, CLASS=25, COMPOSITION=26, CONSTRAINTS=27, END=28, ENUM=29, 
		LT=30, MODEL=31, OPERATIONS=32, ORDERED=33, ROLE=34, BOOLEAN=35, TRUE=36, 
		FALSE=37, INTEGER=38, REAL=39, STRING=40, STRING_LITERAL=41, NUMBER=42, 
		ID=43, COMMENT=44, END_LINE=45, WS=46, OTHER=47;
	public const int
		RULE_startRule = 0, RULE_model = 1, RULE_modelName = 2, RULE_class = 3, 
		RULE_className = 4, RULE_inheritance = 5, RULE_attribute = 6, RULE_operation = 7, 
		RULE_parameter = 8, RULE_operationBody = 9, RULE_statements = 10, RULE_statement = 11, 
		RULE_conditional = 12, RULE_pre = 13, RULE_post = 14, RULE_enumeration = 15, 
		RULE_enumerationName = 16, RULE_enumerationLiteral = 17, RULE_type = 18, 
		RULE_typeLiteral = 19, RULE_simpleType = 20, RULE_simpleTypeLiteral = 21, 
		RULE_booleanLiteral = 22, RULE_integerLiteral = 23, RULE_realLiteral = 24, 
		RULE_stringLiteral = 25, RULE_association = 26, RULE_associationName = 27, 
		RULE_associationItem = 28, RULE_roleName = 29, RULE_multiplicity = 30, 
		RULE_multiplicityValue = 31, RULE_constraints = 32;
	public static readonly string[] ruleNames = {
		"startRule", "model", "modelName", "class", "className", "inheritance", 
		"attribute", "operation", "parameter", "operationBody", "statements", 
		"statement", "conditional", "pre", "post", "enumeration", "enumerationName", 
		"enumerationLiteral", "type", "typeLiteral", "simpleType", "simpleTypeLiteral", 
		"booleanLiteral", "integerLiteral", "realLiteral", "stringLiteral", "association", 
		"associationName", "associationItem", "roleName", "multiplicity", "multiplicityValue", 
		"constraints"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "':'", "'init'", "'='", "';'", "'('", "')'", "'if'", "'then'", 
		"'else'", "'pre:'", "'post:'", "'{'", "'}'", "'.'", "'['", "'..'", "']'", 
		"'*'", "'abstract'", "'association'", "'attributes'", "'begin'", "'between'", 
		"'class'", "'composition'", "'constraints'", "'end'", "'enum'", "'<'", 
		"'model'", "'operations'", "'ordered'", "'role'", "'Boolean'", "'true'", 
		"'false'", "'Integer'", "'Real'", "'String'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "ABSTRACT", "ASSOCIATION", 
		"ATTRIBUTES", "BEGIN", "BETWEEN", "CLASS", "COMPOSITION", "CONSTRAINTS", 
		"END", "ENUM", "LT", "MODEL", "OPERATIONS", "ORDERED", "ROLE", "BOOLEAN", 
		"TRUE", "FALSE", "INTEGER", "REAL", "STRING", "STRING_LITERAL", "NUMBER", 
		"ID", "COMMENT", "END_LINE", "WS", "OTHER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Use.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UseParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UseParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UseParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModelContext model() {
			return GetRuleContext<ModelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(UseParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext[] @class() {
			return GetRuleContexts<ClassContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext @class(int i) {
			return GetRuleContext<ClassContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationContext[] enumeration() {
			return GetRuleContexts<EnumerationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationContext enumeration(int i) {
			return GetRuleContext<EnumerationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociationContext[] association() {
			return GetRuleContexts<AssociationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociationContext association(int i) {
			return GetRuleContext<AssociationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintsContext constraints() {
			return GetRuleContext<ConstraintsContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(Context, State);
		EnterRule(_localctx, 0, RULE_startRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			model();
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 640679936L) != 0)) {
				{
				State = 70;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ABSTRACT:
				case CLASS:
					{
					State = 67;
					@class();
					}
					break;
				case ENUM:
					{
					State = 68;
					enumeration();
					}
					break;
				case ASSOCIATION:
				case COMPOSITION:
					{
					State = 69;
					association();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINTS) {
				{
				State = 75;
				constraints();
				}
			}

			State = 78;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODEL() { return GetToken(UseParser.MODEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModelNameContext modelName() {
			return GetRuleContext<ModelNameContext>(0);
		}
		public ModelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterModel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitModel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelContext model() {
		ModelContext _localctx = new ModelContext(Context, State);
		EnterRule(_localctx, 2, RULE_model);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(MODEL);
			State = 81;
			modelName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		public ModelNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterModelName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitModelName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelNameContext modelName() {
		ModelNameContext _localctx = new ModelNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_modelName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(UseParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(UseParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(UseParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritanceContext inheritance() {
			return GetRuleContext<InheritanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTES() { return GetToken(UseParser.ATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATIONS() { return GetToken(UseParser.OPERATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 6, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ABSTRACT) {
				{
				State = 85;
				Match(ABSTRACT);
				}
			}

			State = 88;
			Match(CLASS);
			State = 89;
			className();
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 90;
				inheritance();
				}
			}

			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ATTRIBUTES) {
				{
				State = 93;
				Match(ATTRIBUTES);
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 94;
					attribute();
					}
					}
					State = 99;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPERATIONS) {
				{
				State = 102;
				Match(OPERATIONS);
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 103;
					operation();
					}
					}
					State = 108;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 111;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(UseParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext[] className() {
			return GetRuleContexts<ClassNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className(int i) {
			return GetRuleContext<ClassNameContext>(i);
		}
		public InheritanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterInheritance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitInheritance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritanceContext inheritance() {
		InheritanceContext _localctx = new InheritanceContext(Context, State);
		EnterRule(_localctx, 10, RULE_inheritance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(LT);
			State = 116;
			className();
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 117;
				Match(T__0);
				State = 118;
				className();
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeLiteralContext typeLiteral() {
			return GetRuleContext<TypeLiteralContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(ID);
			State = 125;
			Match(T__1);
			State = 126;
			type();
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 127;
				Match(T__2);
				State = 128;
				Match(T__3);
				State = 129;
				typeLiteral();
				State = 130;
				Match(T__4);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperationBodyContext operationBody() {
			return GetRuleContext<OperationBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 14, RULE_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(ID);
			State = 135;
			Match(T__5);
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 136;
				parameter();
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 137;
					Match(T__0);
					}
				}

				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 145;
			Match(T__6);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 146;
				Match(T__1);
				State = 147;
				type();
				}
			}

			State = 150;
			operationBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 16, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(ID);
			State = 153;
			Match(T__1);
			State = 154;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(UseParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(UseParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreContext[] pre() {
			return GetRuleContexts<PreContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreContext pre(int i) {
			return GetRuleContext<PreContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostContext[] post() {
			return GetRuleContexts<PostContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostContext post(int i) {
			return GetRuleContext<PostContext>(i);
		}
		public OperationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterOperationBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitOperationBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationBodyContext operationBody() {
		OperationBodyContext _localctx = new OperationBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_operationBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(BEGIN);
			State = 157;
			statements();
			State = 158;
			Match(END);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__10) {
				{
				{
				State = 159;
				pre();
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 165;
				post();
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 20, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 171;
				statement();
				}
				break;
			}
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 174;
				Match(T__4);
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281474708275198L) != 0)) {
					{
					{
					State = 175;
					statement();
					}
					}
					State = 180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] END() { return GetTokens(UseParser.END); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END(int i) {
			return GetToken(UseParser.END, i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		int _la;
		try {
			int _alt;
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183;
				conditional();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 184;
						_la = TokenStream.LA(1);
						if ( _la <= 0 || (_la==END) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 187;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(UseParser.END, 0); }
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterConditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitConditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 24, RULE_conditional);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(T__7);
			State = 193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 192;
				Match(T__5);
				}
				break;
			}
			State = 195;
			statement();
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 196;
				Match(T__6);
				}
			}

			State = 199;
			Match(T__8);
			State = 203;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 200;
					statement();
					}
					} 
				}
				State = 205;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 206;
				Match(T__9);
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281474708275198L) != 0)) {
					{
					{
					State = 207;
					statement();
					}
					}
					State = 212;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 215;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public PreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pre; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterPre(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitPre(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPre(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreContext pre() {
		PreContext _localctx = new PreContext(Context, State);
		EnterRule(_localctx, 26, RULE_pre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(T__10);
			State = 218;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public PostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_post; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterPost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitPost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPost(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostContext post() {
		PostContext _localctx = new PostContext(Context, State);
		EnterRule(_localctx, 28, RULE_post);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(T__11);
			State = 221;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(UseParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationNameContext enumerationName() {
			return GetRuleContext<EnumerationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationLiteralContext[] enumerationLiteral() {
			return GetRuleContexts<EnumerationLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationLiteralContext enumerationLiteral(int i) {
			return GetRuleContext<EnumerationLiteralContext>(i);
		}
		public EnumerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterEnumeration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitEnumeration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationContext enumeration() {
		EnumerationContext _localctx = new EnumerationContext(Context, State);
		EnterRule(_localctx, 30, RULE_enumeration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(ENUM);
			State = 224;
			enumerationName();
			State = 225;
			Match(T__12);
			State = 226;
			enumerationLiteral();
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 227;
				Match(T__0);
				State = 228;
				enumerationLiteral();
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 234;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		public EnumerationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterEnumerationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitEnumerationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationNameContext enumerationName() {
		EnumerationNameContext _localctx = new EnumerationNameContext(Context, State);
		EnterRule(_localctx, 32, RULE_enumerationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		public EnumerationLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterEnumerationLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitEnumerationLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationLiteralContext enumerationLiteral() {
		EnumerationLiteralContext _localctx = new EnumerationLiteralContext(Context, State);
		EnterRule(_localctx, 34, RULE_enumerationLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationNameContext enumerationName() {
			return GetRuleContext<EnumerationNameContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_type);
		try {
			State = 242;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case INTEGER:
			case REAL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 240;
				simpleType();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241;
				enumerationName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeLiteralContext simpleTypeLiteral() {
			return GetRuleContext<SimpleTypeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationLiteralContext enumerationLiteral() {
			return GetRuleContext<EnumerationLiteralContext>(0);
		}
		public TypeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterTypeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitTypeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeLiteralContext typeLiteral() {
		TypeLiteralContext _localctx = new TypeLiteralContext(Context, State);
		EnterRule(_localctx, 38, RULE_typeLiteral);
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case STRING_LITERAL:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 244;
				simpleTypeLiteral();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 245;
				enumerationLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(UseParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(UseParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(UseParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UseParser.STRING, 0); }
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 40, RULE_simpleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1958505086976L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealLiteralContext realLiteral() {
			return GetRuleContext<RealLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public SimpleTypeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterSimpleTypeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitSimpleTypeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeLiteralContext simpleTypeLiteral() {
		SimpleTypeLiteralContext _localctx = new SimpleTypeLiteralContext(Context, State);
		EnterRule(_localctx, 42, RULE_simpleTypeLiteral);
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 250;
				booleanLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251;
				integerLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 252;
				realLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 253;
				stringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(UseParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(UseParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 44, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(UseParser.NUMBER, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 46, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(UseParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(UseParser.NUMBER, i);
		}
		public RealLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterRealLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitRealLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealLiteralContext realLiteral() {
		RealLiteralContext _localctx = new RealLiteralContext(Context, State);
		EnterRule(_localctx, 48, RULE_realLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(NUMBER);
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 261;
				Match(T__14);
				State = 262;
				Match(NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(UseParser.STRING_LITERAL, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 50, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssociationNameContext associationName() {
			return GetRuleContext<AssociationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(UseParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssociationItemContext[] associationItem() {
			return GetRuleContexts<AssociationItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociationItemContext associationItem(int i) {
			return GetRuleContext<AssociationItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(UseParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSOCIATION() { return GetToken(UseParser.ASSOCIATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPOSITION() { return GetToken(UseParser.COMPOSITION, 0); }
		public AssociationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_association; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterAssociation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitAssociation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationContext association() {
		AssociationContext _localctx = new AssociationContext(Context, State);
		EnterRule(_localctx, 52, RULE_association);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_la = TokenStream.LA(1);
			if ( !(_la==ASSOCIATION || _la==COMPOSITION) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 268;
			associationName();
			State = 269;
			Match(BETWEEN);
			State = 270;
			associationItem();
			State = 271;
			associationItem();
			State = 272;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		public AssociationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterAssociationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitAssociationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationNameContext associationName() {
		AssociationNameContext _localctx = new AssociationNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_associationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicityContext multiplicity() {
			return GetRuleContext<MultiplicityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(UseParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext roleName() {
			return GetRuleContext<RoleNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDERED() { return GetToken(UseParser.ORDERED, 0); }
		public AssociationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterAssociationItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitAssociationItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationItemContext associationItem() {
		AssociationItemContext _localctx = new AssociationItemContext(Context, State);
		EnterRule(_localctx, 56, RULE_associationItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			className();
			State = 277;
			multiplicity();
			State = 278;
			Match(ROLE);
			State = 279;
			roleName();
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDERED) {
				{
				State = 280;
				Match(ORDERED);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		public RoleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterRoleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitRoleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleNameContext roleName() {
		RoleNameContext _localctx = new RoleNameContext(Context, State);
		EnterRule(_localctx, 58, RULE_roleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicityValueContext[] multiplicityValue() {
			return GetRuleContexts<MultiplicityValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicityValueContext multiplicityValue(int i) {
			return GetRuleContext<MultiplicityValueContext>(i);
		}
		public MultiplicityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterMultiplicity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitMultiplicity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicityContext multiplicity() {
		MultiplicityContext _localctx = new MultiplicityContext(Context, State);
		EnterRule(_localctx, 60, RULE_multiplicity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(T__15);
			State = 286;
			multiplicityValue();
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 287;
				Match(T__16);
				State = 288;
				multiplicityValue();
				}
			}

			State = 291;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicityValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(UseParser.NUMBER, 0); }
		public MultiplicityValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicityValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterMultiplicityValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitMultiplicityValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicityValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicityValueContext multiplicityValue() {
		MultiplicityValueContext _localctx = new MultiplicityValueContext(Context, State);
		EnterRule(_localctx, 62, RULE_multiplicityValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			_la = TokenStream.LA(1);
			if ( !(_la==T__18 || _la==NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINTS() { return GetToken(UseParser.CONSTRAINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(UseParser.Eof, 0); }
		public ConstraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterConstraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitConstraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintsContext constraints() {
		ConstraintsContext _localctx = new ConstraintsContext(Context, State);
		EnterRule(_localctx, 64, RULE_constraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(CONSTRAINTS);
			State = 299;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 296;
					MatchWildcard();
					}
					} 
				}
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 302;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,47,305,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,1,0,1,0,1,0,5,0,71,8,0,10,
		0,12,0,74,9,0,1,0,3,0,77,8,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,3,3,87,8,
		3,1,3,1,3,1,3,3,3,92,8,3,1,3,1,3,5,3,96,8,3,10,3,12,3,99,9,3,3,3,101,8,
		3,1,3,1,3,5,3,105,8,3,10,3,12,3,108,9,3,3,3,110,8,3,1,3,1,3,1,4,1,4,1,
		5,1,5,1,5,1,5,5,5,120,8,5,10,5,12,5,123,9,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,3,6,133,8,6,1,7,1,7,1,7,1,7,3,7,139,8,7,5,7,141,8,7,10,7,12,7,144,
		9,7,1,7,1,7,1,7,3,7,149,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,5,
		9,161,8,9,10,9,12,9,164,9,9,1,9,5,9,167,8,9,10,9,12,9,170,9,9,1,10,3,10,
		173,8,10,1,10,1,10,5,10,177,8,10,10,10,12,10,180,9,10,3,10,182,8,10,1,
		11,1,11,4,11,186,8,11,11,11,12,11,187,3,11,190,8,11,1,12,1,12,3,12,194,
		8,12,1,12,1,12,3,12,198,8,12,1,12,1,12,5,12,202,8,12,10,12,12,12,205,9,
		12,1,12,1,12,5,12,209,8,12,10,12,12,12,212,9,12,3,12,214,8,12,1,12,1,12,
		1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,5,15,230,8,
		15,10,15,12,15,233,9,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,3,18,243,
		8,18,1,19,1,19,3,19,247,8,19,1,20,1,20,1,21,1,21,1,21,1,21,3,21,255,8,
		21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,3,24,264,8,24,1,25,1,25,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,3,28,282,8,
		28,1,29,1,29,1,30,1,30,1,30,1,30,3,30,290,8,30,1,30,1,30,1,31,1,31,1,32,
		1,32,5,32,298,8,32,10,32,12,32,301,9,32,1,32,1,32,1,32,1,299,0,33,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,0,5,1,0,28,28,2,0,35,35,38,40,1,0,36,37,2,0,21,21,26,
		26,2,0,19,19,42,42,308,0,66,1,0,0,0,2,80,1,0,0,0,4,83,1,0,0,0,6,86,1,0,
		0,0,8,113,1,0,0,0,10,115,1,0,0,0,12,124,1,0,0,0,14,134,1,0,0,0,16,152,
		1,0,0,0,18,156,1,0,0,0,20,172,1,0,0,0,22,189,1,0,0,0,24,191,1,0,0,0,26,
		217,1,0,0,0,28,220,1,0,0,0,30,223,1,0,0,0,32,236,1,0,0,0,34,238,1,0,0,
		0,36,242,1,0,0,0,38,246,1,0,0,0,40,248,1,0,0,0,42,254,1,0,0,0,44,256,1,
		0,0,0,46,258,1,0,0,0,48,260,1,0,0,0,50,265,1,0,0,0,52,267,1,0,0,0,54,274,
		1,0,0,0,56,276,1,0,0,0,58,283,1,0,0,0,60,285,1,0,0,0,62,293,1,0,0,0,64,
		295,1,0,0,0,66,72,3,2,1,0,67,71,3,6,3,0,68,71,3,30,15,0,69,71,3,52,26,
		0,70,67,1,0,0,0,70,68,1,0,0,0,70,69,1,0,0,0,71,74,1,0,0,0,72,70,1,0,0,
		0,72,73,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,75,77,3,64,32,0,76,75,1,0,
		0,0,76,77,1,0,0,0,77,78,1,0,0,0,78,79,5,0,0,1,79,1,1,0,0,0,80,81,5,31,
		0,0,81,82,3,4,2,0,82,3,1,0,0,0,83,84,5,43,0,0,84,5,1,0,0,0,85,87,5,20,
		0,0,86,85,1,0,0,0,86,87,1,0,0,0,87,88,1,0,0,0,88,89,5,25,0,0,89,91,3,8,
		4,0,90,92,3,10,5,0,91,90,1,0,0,0,91,92,1,0,0,0,92,100,1,0,0,0,93,97,5,
		22,0,0,94,96,3,12,6,0,95,94,1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,97,98,
		1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,100,93,1,0,0,0,100,101,1,0,0,0,101,
		109,1,0,0,0,102,106,5,32,0,0,103,105,3,14,7,0,104,103,1,0,0,0,105,108,
		1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,
		0,109,102,1,0,0,0,109,110,1,0,0,0,110,111,1,0,0,0,111,112,5,28,0,0,112,
		7,1,0,0,0,113,114,5,43,0,0,114,9,1,0,0,0,115,116,5,30,0,0,116,121,3,8,
		4,0,117,118,5,1,0,0,118,120,3,8,4,0,119,117,1,0,0,0,120,123,1,0,0,0,121,
		119,1,0,0,0,121,122,1,0,0,0,122,11,1,0,0,0,123,121,1,0,0,0,124,125,5,43,
		0,0,125,126,5,2,0,0,126,132,3,36,18,0,127,128,5,3,0,0,128,129,5,4,0,0,
		129,130,3,38,19,0,130,131,5,5,0,0,131,133,1,0,0,0,132,127,1,0,0,0,132,
		133,1,0,0,0,133,13,1,0,0,0,134,135,5,43,0,0,135,142,5,6,0,0,136,138,3,
		16,8,0,137,139,5,1,0,0,138,137,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,
		140,136,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,145,
		1,0,0,0,144,142,1,0,0,0,145,148,5,7,0,0,146,147,5,2,0,0,147,149,3,36,18,
		0,148,146,1,0,0,0,148,149,1,0,0,0,149,150,1,0,0,0,150,151,3,18,9,0,151,
		15,1,0,0,0,152,153,5,43,0,0,153,154,5,2,0,0,154,155,3,36,18,0,155,17,1,
		0,0,0,156,157,5,23,0,0,157,158,3,20,10,0,158,162,5,28,0,0,159,161,3,26,
		13,0,160,159,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,
		168,1,0,0,0,164,162,1,0,0,0,165,167,3,28,14,0,166,165,1,0,0,0,167,170,
		1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,19,1,0,0,0,170,168,1,0,0,0,
		171,173,3,22,11,0,172,171,1,0,0,0,172,173,1,0,0,0,173,181,1,0,0,0,174,
		178,5,5,0,0,175,177,3,22,11,0,176,175,1,0,0,0,177,180,1,0,0,0,178,176,
		1,0,0,0,178,179,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,181,174,1,0,0,
		0,181,182,1,0,0,0,182,21,1,0,0,0,183,190,3,24,12,0,184,186,8,0,0,0,185,
		184,1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,190,1,
		0,0,0,189,183,1,0,0,0,189,185,1,0,0,0,190,23,1,0,0,0,191,193,5,8,0,0,192,
		194,5,6,0,0,193,192,1,0,0,0,193,194,1,0,0,0,194,195,1,0,0,0,195,197,3,
		22,11,0,196,198,5,7,0,0,197,196,1,0,0,0,197,198,1,0,0,0,198,199,1,0,0,
		0,199,203,5,9,0,0,200,202,3,22,11,0,201,200,1,0,0,0,202,205,1,0,0,0,203,
		201,1,0,0,0,203,204,1,0,0,0,204,213,1,0,0,0,205,203,1,0,0,0,206,210,5,
		10,0,0,207,209,3,22,11,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,
		0,210,211,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,213,206,1,0,0,0,213,
		214,1,0,0,0,214,215,1,0,0,0,215,216,5,28,0,0,216,25,1,0,0,0,217,218,5,
		11,0,0,218,219,3,22,11,0,219,27,1,0,0,0,220,221,5,12,0,0,221,222,3,22,
		11,0,222,29,1,0,0,0,223,224,5,29,0,0,224,225,3,32,16,0,225,226,5,13,0,
		0,226,231,3,34,17,0,227,228,5,1,0,0,228,230,3,34,17,0,229,227,1,0,0,0,
		230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,231,
		1,0,0,0,234,235,5,14,0,0,235,31,1,0,0,0,236,237,5,43,0,0,237,33,1,0,0,
		0,238,239,5,43,0,0,239,35,1,0,0,0,240,243,3,40,20,0,241,243,3,32,16,0,
		242,240,1,0,0,0,242,241,1,0,0,0,243,37,1,0,0,0,244,247,3,42,21,0,245,247,
		3,34,17,0,246,244,1,0,0,0,246,245,1,0,0,0,247,39,1,0,0,0,248,249,7,1,0,
		0,249,41,1,0,0,0,250,255,3,44,22,0,251,255,3,46,23,0,252,255,3,48,24,0,
		253,255,3,50,25,0,254,250,1,0,0,0,254,251,1,0,0,0,254,252,1,0,0,0,254,
		253,1,0,0,0,255,43,1,0,0,0,256,257,7,2,0,0,257,45,1,0,0,0,258,259,5,42,
		0,0,259,47,1,0,0,0,260,263,5,42,0,0,261,262,5,15,0,0,262,264,5,42,0,0,
		263,261,1,0,0,0,263,264,1,0,0,0,264,49,1,0,0,0,265,266,5,41,0,0,266,51,
		1,0,0,0,267,268,7,3,0,0,268,269,3,54,27,0,269,270,5,24,0,0,270,271,3,56,
		28,0,271,272,3,56,28,0,272,273,5,28,0,0,273,53,1,0,0,0,274,275,5,43,0,
		0,275,55,1,0,0,0,276,277,3,8,4,0,277,278,3,60,30,0,278,279,5,34,0,0,279,
		281,3,58,29,0,280,282,5,33,0,0,281,280,1,0,0,0,281,282,1,0,0,0,282,57,
		1,0,0,0,283,284,5,43,0,0,284,59,1,0,0,0,285,286,5,16,0,0,286,289,3,62,
		31,0,287,288,5,17,0,0,288,290,3,62,31,0,289,287,1,0,0,0,289,290,1,0,0,
		0,290,291,1,0,0,0,291,292,5,18,0,0,292,61,1,0,0,0,293,294,7,4,0,0,294,
		63,1,0,0,0,295,299,5,27,0,0,296,298,9,0,0,0,297,296,1,0,0,0,298,301,1,
		0,0,0,299,300,1,0,0,0,299,297,1,0,0,0,300,302,1,0,0,0,301,299,1,0,0,0,
		302,303,5,0,0,1,303,65,1,0,0,0,34,70,72,76,86,91,97,100,106,109,121,132,
		138,142,148,162,168,172,178,181,187,189,193,197,203,210,213,231,242,246,
		254,263,281,289,299
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace UseCodeGenerator.Core.Use.SyntaxAnalizer
