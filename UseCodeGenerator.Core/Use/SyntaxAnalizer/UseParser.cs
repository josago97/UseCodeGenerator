//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Assets/Use.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace UseCodeGenerator.Core.Use.SyntaxAnalizer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class UseParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, ABSTRACT=14, ASSOCIATION=15, ATTRIBUTES=16, 
		BEGIN=17, BETWEEN=18, CLASS=19, END=20, ENUM=21, LT=22, MODEL=23, OPERATIONS=24, 
		ROLE=25, SEMICOLON=26, BOOLEAN=27, TRUE=28, FALSE=29, INTEGER=30, REAL=31, 
		STRING=32, STRING_LITERAL=33, NUMBER=34, ID=35, COMMENT=36, WS=37;
	public const int
		RULE_startRule = 0, RULE_model = 1, RULE_modelName = 2, RULE_class = 3, 
		RULE_className = 4, RULE_inheritance = 5, RULE_attribute = 6, RULE_operation = 7, 
		RULE_parameter = 8, RULE_operationBody = 9, RULE_enumeration = 10, RULE_enumerationName = 11, 
		RULE_enumerationLiteral = 12, RULE_type = 13, RULE_typeLiteral = 14, RULE_simpleType = 15, 
		RULE_simpleTypeLiteral = 16, RULE_booleanLiteral = 17, RULE_integerLiteral = 18, 
		RULE_realLiteral = 19, RULE_stringLiteral = 20, RULE_association = 21, 
		RULE_associationName = 22, RULE_associationItem = 23, RULE_roleName = 24, 
		RULE_multiplicity = 25, RULE_multiplicityValue = 26;
	public static readonly string[] ruleNames = {
		"startRule", "model", "modelName", "class", "className", "inheritance", 
		"attribute", "operation", "parameter", "operationBody", "enumeration", 
		"enumerationName", "enumerationLiteral", "type", "typeLiteral", "simpleType", 
		"simpleTypeLiteral", "booleanLiteral", "integerLiteral", "realLiteral", 
		"stringLiteral", "association", "associationName", "associationItem", 
		"roleName", "multiplicity", "multiplicityValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "':'", "'init'", "'='", "'('", "')'", "'.'", "'{'", "'}'", 
		"'['", "'..'", "']'", "'*'", "'abstract'", "'association'", "'attributes'", 
		"'begin'", "'between'", "'class'", "'end'", "'enum'", "'<'", "'model'", 
		"'operations'", "'role'", "';'", "'Boolean'", "'true'", "'false'", "'Integer'", 
		"'Real'", "'String'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "ABSTRACT", "ASSOCIATION", "ATTRIBUTES", "BEGIN", "BETWEEN", 
		"CLASS", "END", "ENUM", "LT", "MODEL", "OPERATIONS", "ROLE", "SEMICOLON", 
		"BOOLEAN", "TRUE", "FALSE", "INTEGER", "REAL", "STRING", "STRING_LITERAL", 
		"NUMBER", "ID", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Use.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UseParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UseParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UseParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModelContext model() {
			return GetRuleContext<ModelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(UseParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext[] @class() {
			return GetRuleContexts<ClassContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext @class(int i) {
			return GetRuleContext<ClassContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationContext[] enumeration() {
			return GetRuleContexts<EnumerationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationContext enumeration(int i) {
			return GetRuleContext<EnumerationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociationContext[] association() {
			return GetRuleContexts<AssociationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociationContext association(int i) {
			return GetRuleContext<AssociationContext>(i);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(Context, State);
		EnterRule(_localctx, 0, RULE_startRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			model();
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2670592L) != 0)) {
				{
				State = 58;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ABSTRACT:
				case CLASS:
					{
					State = 55;
					@class();
					}
					break;
				case ENUM:
					{
					State = 56;
					enumeration();
					}
					break;
				case ASSOCIATION:
					{
					State = 57;
					association();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 63;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODEL() { return GetToken(UseParser.MODEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModelNameContext modelName() {
			return GetRuleContext<ModelNameContext>(0);
		}
		public ModelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterModel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitModel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelContext model() {
		ModelContext _localctx = new ModelContext(Context, State);
		EnterRule(_localctx, 2, RULE_model);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(MODEL);
			State = 66;
			modelName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		public ModelNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterModelName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitModelName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelNameContext modelName() {
		ModelNameContext _localctx = new ModelNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_modelName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(UseParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(UseParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(UseParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritanceContext inheritance() {
			return GetRuleContext<InheritanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTES() { return GetToken(UseParser.ATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATIONS() { return GetToken(UseParser.OPERATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 6, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ABSTRACT) {
				{
				State = 70;
				Match(ABSTRACT);
				}
			}

			State = 73;
			Match(CLASS);
			State = 74;
			className();
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 75;
				inheritance();
				}
			}

			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ATTRIBUTES) {
				{
				State = 78;
				Match(ATTRIBUTES);
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 79;
					attribute();
					}
					}
					State = 84;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPERATIONS) {
				{
				State = 87;
				Match(OPERATIONS);
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 88;
					operation();
					}
					}
					State = 93;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 96;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(UseParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext[] className() {
			return GetRuleContexts<ClassNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className(int i) {
			return GetRuleContext<ClassNameContext>(i);
		}
		public InheritanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterInheritance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitInheritance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritanceContext inheritance() {
		InheritanceContext _localctx = new InheritanceContext(Context, State);
		EnterRule(_localctx, 10, RULE_inheritance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(LT);
			State = 101;
			className();
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 102;
				Match(T__0);
				State = 103;
				className();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeLiteralContext typeLiteral() {
			return GetRuleContext<TypeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UseParser.SEMICOLON, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(ID);
			State = 110;
			Match(T__1);
			State = 111;
			type();
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 112;
				Match(T__2);
				State = 113;
				Match(T__3);
				State = 114;
				typeLiteral();
				State = 115;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperationBodyContext operationBody() {
			return GetRuleContext<OperationBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 14, RULE_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(ID);
			State = 120;
			Match(T__4);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 121;
				parameter();
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 122;
					Match(T__0);
					}
				}

				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 130;
			Match(T__5);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 131;
				Match(T__1);
				State = 132;
				type();
				}
			}

			State = 135;
			operationBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 16, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(ID);
			State = 138;
			Match(T__1);
			State = 139;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(UseParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] END() { return GetTokens(UseParser.END); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END(int i) {
			return GetToken(UseParser.END, i);
		}
		public OperationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterOperationBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitOperationBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationBodyContext operationBody() {
		OperationBodyContext _localctx = new OperationBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_operationBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(BEGIN);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 274876858366L) != 0)) {
				{
				State = 144;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 142;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==END) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case 2:
					{
					State = 143;
					Match(T__6);
					}
					break;
				}
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 149;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(UseParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationNameContext enumerationName() {
			return GetRuleContext<EnumerationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationLiteralContext[] enumerationLiteral() {
			return GetRuleContexts<EnumerationLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationLiteralContext enumerationLiteral(int i) {
			return GetRuleContext<EnumerationLiteralContext>(i);
		}
		public EnumerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterEnumeration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitEnumeration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationContext enumeration() {
		EnumerationContext _localctx = new EnumerationContext(Context, State);
		EnterRule(_localctx, 20, RULE_enumeration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(ENUM);
			State = 152;
			enumerationName();
			State = 153;
			Match(T__7);
			State = 154;
			enumerationLiteral();
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 155;
				Match(T__0);
				State = 156;
				enumerationLiteral();
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 162;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		public EnumerationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterEnumerationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitEnumerationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationNameContext enumerationName() {
		EnumerationNameContext _localctx = new EnumerationNameContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumerationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		public EnumerationLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterEnumerationLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitEnumerationLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationLiteralContext enumerationLiteral() {
		EnumerationLiteralContext _localctx = new EnumerationLiteralContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumerationLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationNameContext enumerationName() {
			return GetRuleContext<EnumerationNameContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_type);
		try {
			State = 170;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case INTEGER:
			case REAL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 168;
				simpleType();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169;
				enumerationName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeLiteralContext simpleTypeLiteral() {
			return GetRuleContext<SimpleTypeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationLiteralContext enumerationLiteral() {
			return GetRuleContext<EnumerationLiteralContext>(0);
		}
		public TypeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterTypeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitTypeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeLiteralContext typeLiteral() {
		TypeLiteralContext _localctx = new TypeLiteralContext(Context, State);
		EnterRule(_localctx, 28, RULE_typeLiteral);
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case STRING_LITERAL:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172;
				simpleTypeLiteral();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173;
				enumerationLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(UseParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(UseParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(UseParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UseParser.STRING, 0); }
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_simpleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7650410496L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealLiteralContext realLiteral() {
			return GetRuleContext<RealLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public SimpleTypeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterSimpleTypeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitSimpleTypeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeLiteralContext simpleTypeLiteral() {
		SimpleTypeLiteralContext _localctx = new SimpleTypeLiteralContext(Context, State);
		EnterRule(_localctx, 32, RULE_simpleTypeLiteral);
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178;
				booleanLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179;
				integerLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 180;
				realLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 181;
				stringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(UseParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(UseParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 34, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(UseParser.NUMBER, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 36, RULE_integerLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(UseParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(UseParser.NUMBER, i);
		}
		public RealLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterRealLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitRealLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealLiteralContext realLiteral() {
		RealLiteralContext _localctx = new RealLiteralContext(Context, State);
		EnterRule(_localctx, 38, RULE_realLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(NUMBER);
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 189;
				Match(T__6);
				State = 190;
				Match(NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(UseParser.STRING_LITERAL, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 40, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSOCIATION() { return GetToken(UseParser.ASSOCIATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssociationNameContext associationName() {
			return GetRuleContext<AssociationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(UseParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssociationItemContext[] associationItem() {
			return GetRuleContexts<AssociationItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociationItemContext associationItem(int i) {
			return GetRuleContext<AssociationItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(UseParser.END, 0); }
		public AssociationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_association; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterAssociation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitAssociation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationContext association() {
		AssociationContext _localctx = new AssociationContext(Context, State);
		EnterRule(_localctx, 42, RULE_association);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(ASSOCIATION);
			State = 196;
			associationName();
			State = 197;
			Match(BETWEEN);
			State = 198;
			associationItem();
			State = 199;
			associationItem();
			State = 200;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		public AssociationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterAssociationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitAssociationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationNameContext associationName() {
		AssociationNameContext _localctx = new AssociationNameContext(Context, State);
		EnterRule(_localctx, 44, RULE_associationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicityContext multiplicity() {
			return GetRuleContext<MultiplicityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(UseParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext roleName() {
			return GetRuleContext<RoleNameContext>(0);
		}
		public AssociationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associationItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterAssociationItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitAssociationItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociationItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationItemContext associationItem() {
		AssociationItemContext _localctx = new AssociationItemContext(Context, State);
		EnterRule(_localctx, 46, RULE_associationItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			className();
			State = 205;
			multiplicity();
			State = 206;
			Match(ROLE);
			State = 207;
			roleName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		public RoleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterRoleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitRoleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleNameContext roleName() {
		RoleNameContext _localctx = new RoleNameContext(Context, State);
		EnterRule(_localctx, 48, RULE_roleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicityValueContext[] multiplicityValue() {
			return GetRuleContexts<MultiplicityValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicityValueContext multiplicityValue(int i) {
			return GetRuleContext<MultiplicityValueContext>(i);
		}
		public MultiplicityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterMultiplicity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitMultiplicity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicityContext multiplicity() {
		MultiplicityContext _localctx = new MultiplicityContext(Context, State);
		EnterRule(_localctx, 50, RULE_multiplicity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(T__9);
			State = 212;
			multiplicityValue();
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 213;
				Match(T__10);
				State = 214;
				multiplicityValue();
				}
			}

			State = 217;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicityValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(UseParser.NUMBER, 0); }
		public MultiplicityValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicityValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterMultiplicityValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitMultiplicityValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicityValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicityValueContext multiplicityValue() {
		MultiplicityValueContext _localctx = new MultiplicityValueContext(Context, State);
		EnterRule(_localctx, 52, RULE_multiplicityValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			_la = TokenStream.LA(1);
			if ( !(_la==T__12 || _la==NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,37,222,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,0,1,0,5,0,
		59,8,0,10,0,12,0,62,9,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,3,3,72,8,3,1,3,
		1,3,1,3,3,3,77,8,3,1,3,1,3,5,3,81,8,3,10,3,12,3,84,9,3,3,3,86,8,3,1,3,
		1,3,5,3,90,8,3,10,3,12,3,93,9,3,3,3,95,8,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,
		1,5,5,5,105,8,5,10,5,12,5,108,9,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,
		118,8,6,1,7,1,7,1,7,1,7,3,7,124,8,7,5,7,126,8,7,10,7,12,7,129,9,7,1,7,
		1,7,1,7,3,7,134,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,5,9,145,8,9,10,
		9,12,9,148,9,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,158,8,10,10,
		10,12,10,161,9,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,3,13,171,8,13,
		1,14,1,14,3,14,175,8,14,1,15,1,15,1,16,1,16,1,16,1,16,3,16,183,8,16,1,
		17,1,17,1,18,1,18,1,19,1,19,1,19,3,19,192,8,19,1,20,1,20,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,25,
		1,25,1,25,1,25,3,25,216,8,25,1,25,1,25,1,26,1,26,1,26,0,0,27,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,0,4,
		1,0,20,20,2,0,27,27,30,32,1,0,28,29,2,0,13,13,34,34,218,0,54,1,0,0,0,2,
		65,1,0,0,0,4,68,1,0,0,0,6,71,1,0,0,0,8,98,1,0,0,0,10,100,1,0,0,0,12,109,
		1,0,0,0,14,119,1,0,0,0,16,137,1,0,0,0,18,141,1,0,0,0,20,151,1,0,0,0,22,
		164,1,0,0,0,24,166,1,0,0,0,26,170,1,0,0,0,28,174,1,0,0,0,30,176,1,0,0,
		0,32,182,1,0,0,0,34,184,1,0,0,0,36,186,1,0,0,0,38,188,1,0,0,0,40,193,1,
		0,0,0,42,195,1,0,0,0,44,202,1,0,0,0,46,204,1,0,0,0,48,209,1,0,0,0,50,211,
		1,0,0,0,52,219,1,0,0,0,54,60,3,2,1,0,55,59,3,6,3,0,56,59,3,20,10,0,57,
		59,3,42,21,0,58,55,1,0,0,0,58,56,1,0,0,0,58,57,1,0,0,0,59,62,1,0,0,0,60,
		58,1,0,0,0,60,61,1,0,0,0,61,63,1,0,0,0,62,60,1,0,0,0,63,64,5,0,0,1,64,
		1,1,0,0,0,65,66,5,23,0,0,66,67,3,4,2,0,67,3,1,0,0,0,68,69,5,35,0,0,69,
		5,1,0,0,0,70,72,5,14,0,0,71,70,1,0,0,0,71,72,1,0,0,0,72,73,1,0,0,0,73,
		74,5,19,0,0,74,76,3,8,4,0,75,77,3,10,5,0,76,75,1,0,0,0,76,77,1,0,0,0,77,
		85,1,0,0,0,78,82,5,16,0,0,79,81,3,12,6,0,80,79,1,0,0,0,81,84,1,0,0,0,82,
		80,1,0,0,0,82,83,1,0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,85,78,1,0,0,0,85,
		86,1,0,0,0,86,94,1,0,0,0,87,91,5,24,0,0,88,90,3,14,7,0,89,88,1,0,0,0,90,
		93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,95,1,0,0,0,93,91,1,0,0,0,94,
		87,1,0,0,0,94,95,1,0,0,0,95,96,1,0,0,0,96,97,5,20,0,0,97,7,1,0,0,0,98,
		99,5,35,0,0,99,9,1,0,0,0,100,101,5,22,0,0,101,106,3,8,4,0,102,103,5,1,
		0,0,103,105,3,8,4,0,104,102,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,
		107,1,0,0,0,107,11,1,0,0,0,108,106,1,0,0,0,109,110,5,35,0,0,110,111,5,
		2,0,0,111,117,3,26,13,0,112,113,5,3,0,0,113,114,5,4,0,0,114,115,3,28,14,
		0,115,116,5,26,0,0,116,118,1,0,0,0,117,112,1,0,0,0,117,118,1,0,0,0,118,
		13,1,0,0,0,119,120,5,35,0,0,120,127,5,5,0,0,121,123,3,16,8,0,122,124,5,
		1,0,0,123,122,1,0,0,0,123,124,1,0,0,0,124,126,1,0,0,0,125,121,1,0,0,0,
		126,129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,127,
		1,0,0,0,130,133,5,6,0,0,131,132,5,2,0,0,132,134,3,26,13,0,133,131,1,0,
		0,0,133,134,1,0,0,0,134,135,1,0,0,0,135,136,3,18,9,0,136,15,1,0,0,0,137,
		138,5,35,0,0,138,139,5,2,0,0,139,140,3,26,13,0,140,17,1,0,0,0,141,146,
		5,17,0,0,142,145,8,0,0,0,143,145,5,7,0,0,144,142,1,0,0,0,144,143,1,0,0,
		0,145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,149,1,0,0,0,148,
		146,1,0,0,0,149,150,5,20,0,0,150,19,1,0,0,0,151,152,5,21,0,0,152,153,3,
		22,11,0,153,154,5,8,0,0,154,159,3,24,12,0,155,156,5,1,0,0,156,158,3,24,
		12,0,157,155,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,
		162,1,0,0,0,161,159,1,0,0,0,162,163,5,9,0,0,163,21,1,0,0,0,164,165,5,35,
		0,0,165,23,1,0,0,0,166,167,5,35,0,0,167,25,1,0,0,0,168,171,3,30,15,0,169,
		171,3,22,11,0,170,168,1,0,0,0,170,169,1,0,0,0,171,27,1,0,0,0,172,175,3,
		32,16,0,173,175,3,24,12,0,174,172,1,0,0,0,174,173,1,0,0,0,175,29,1,0,0,
		0,176,177,7,1,0,0,177,31,1,0,0,0,178,183,3,34,17,0,179,183,3,36,18,0,180,
		183,3,38,19,0,181,183,3,40,20,0,182,178,1,0,0,0,182,179,1,0,0,0,182,180,
		1,0,0,0,182,181,1,0,0,0,183,33,1,0,0,0,184,185,7,2,0,0,185,35,1,0,0,0,
		186,187,5,34,0,0,187,37,1,0,0,0,188,191,5,34,0,0,189,190,5,7,0,0,190,192,
		5,34,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,39,1,0,0,0,193,194,5,33,0,
		0,194,41,1,0,0,0,195,196,5,15,0,0,196,197,3,44,22,0,197,198,5,18,0,0,198,
		199,3,46,23,0,199,200,3,46,23,0,200,201,5,20,0,0,201,43,1,0,0,0,202,203,
		5,35,0,0,203,45,1,0,0,0,204,205,3,8,4,0,205,206,3,50,25,0,206,207,5,25,
		0,0,207,208,3,48,24,0,208,47,1,0,0,0,209,210,5,35,0,0,210,49,1,0,0,0,211,
		212,5,10,0,0,212,215,3,52,26,0,213,214,5,11,0,0,214,216,3,52,26,0,215,
		213,1,0,0,0,215,216,1,0,0,0,216,217,1,0,0,0,217,218,5,12,0,0,218,51,1,
		0,0,0,219,220,7,3,0,0,220,53,1,0,0,0,21,58,60,71,76,82,85,91,94,106,117,
		123,127,133,144,146,159,170,174,182,191,215
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace UseCodeGenerator.Core.Use.SyntaxAnalizer
