//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Assets/Use.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace UseCodeGenerator.Use.SyntaxAnalizer {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class UseLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, ABSTRACT=12, ASSOCIATION=13, ATTRIBUTES=14, BEGIN=15, 
		BETWEEN=16, CLASS=17, END=18, ENUM=19, LT=20, MODEL=21, OPERATIONS=22, 
		ROLE=23, SEMICOLON=24, BOOLEAN=25, INTEGER=26, REAL=27, STRING=28, BOOLEAN_LITERAL=29, 
		INTEGER_LITERAL=30, REAL_LITERAL=31, STRING_LITERAL=32, ID=33, COMMENT=34, 
		WS=35;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "ABSTRACT", "ASSOCIATION", "ATTRIBUTES", "BEGIN", "BETWEEN", 
		"CLASS", "END", "ENUM", "LT", "MODEL", "OPERATIONS", "ROLE", "SEMICOLON", 
		"BOOLEAN", "INTEGER", "REAL", "STRING", "BOOLEAN_LITERAL", "INTEGER_LITERAL", 
		"REAL_LITERAL", "STRING_LITERAL", "Digits", "StringDelimeter", "StringContent", 
		"ID", "COMMENT", "WS"
	};


	public UseLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public UseLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "':'", "'init'", "'='", "'('", "')'", "'{'", "'}'", "'['", 
		"'*'", "']'", "'abstract'", "'association'", "'attributes'", "'begin'", 
		"'between'", "'class'", "'end'", "'enum'", "'<'", "'model'", "'operations'", 
		"'role'", "';'", "'Boolean'", "'Integer'", "'Real'", "'String'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"ABSTRACT", "ASSOCIATION", "ATTRIBUTES", "BEGIN", "BETWEEN", "CLASS", 
		"END", "ENUM", "LT", "MODEL", "OPERATIONS", "ROLE", "SEMICOLON", "BOOLEAN", 
		"INTEGER", "REAL", "STRING", "BOOLEAN_LITERAL", "INTEGER_LITERAL", "REAL_LITERAL", 
		"STRING_LITERAL", "ID", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Use.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UseLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,35,277,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,
		4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
		1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,227,8,28,1,29,1,29,1,
		30,1,30,1,30,1,30,1,30,3,30,236,8,30,1,31,1,31,1,31,1,31,1,32,4,32,243,
		8,32,11,32,12,32,244,1,33,1,33,1,34,5,34,250,8,34,10,34,12,34,253,9,34,
		1,35,1,35,5,35,257,8,35,10,35,12,35,260,9,35,1,36,1,36,5,36,264,8,36,10,
		36,12,36,267,9,36,1,36,1,36,1,37,4,37,272,8,37,11,37,12,37,273,1,37,1,
		37,0,0,38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
		13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
		25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,0,67,0,69,0,71,33,73,34,
		75,35,1,0,6,1,0,48,57,1,0,39,39,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
		95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,280,0,1,1,0,0,0,0,3,
		1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
		0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
		0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
		1,0,0,0,1,77,1,0,0,0,3,79,1,0,0,0,5,81,1,0,0,0,7,86,1,0,0,0,9,88,1,0,0,
		0,11,90,1,0,0,0,13,92,1,0,0,0,15,94,1,0,0,0,17,96,1,0,0,0,19,98,1,0,0,
		0,21,100,1,0,0,0,23,102,1,0,0,0,25,111,1,0,0,0,27,123,1,0,0,0,29,134,1,
		0,0,0,31,140,1,0,0,0,33,148,1,0,0,0,35,154,1,0,0,0,37,158,1,0,0,0,39,163,
		1,0,0,0,41,165,1,0,0,0,43,171,1,0,0,0,45,182,1,0,0,0,47,187,1,0,0,0,49,
		189,1,0,0,0,51,197,1,0,0,0,53,205,1,0,0,0,55,210,1,0,0,0,57,226,1,0,0,
		0,59,228,1,0,0,0,61,235,1,0,0,0,63,237,1,0,0,0,65,242,1,0,0,0,67,246,1,
		0,0,0,69,251,1,0,0,0,71,254,1,0,0,0,73,261,1,0,0,0,75,271,1,0,0,0,77,78,
		5,44,0,0,78,2,1,0,0,0,79,80,5,58,0,0,80,4,1,0,0,0,81,82,5,105,0,0,82,83,
		5,110,0,0,83,84,5,105,0,0,84,85,5,116,0,0,85,6,1,0,0,0,86,87,5,61,0,0,
		87,8,1,0,0,0,88,89,5,40,0,0,89,10,1,0,0,0,90,91,5,41,0,0,91,12,1,0,0,0,
		92,93,5,123,0,0,93,14,1,0,0,0,94,95,5,125,0,0,95,16,1,0,0,0,96,97,5,91,
		0,0,97,18,1,0,0,0,98,99,5,42,0,0,99,20,1,0,0,0,100,101,5,93,0,0,101,22,
		1,0,0,0,102,103,5,97,0,0,103,104,5,98,0,0,104,105,5,115,0,0,105,106,5,
		116,0,0,106,107,5,114,0,0,107,108,5,97,0,0,108,109,5,99,0,0,109,110,5,
		116,0,0,110,24,1,0,0,0,111,112,5,97,0,0,112,113,5,115,0,0,113,114,5,115,
		0,0,114,115,5,111,0,0,115,116,5,99,0,0,116,117,5,105,0,0,117,118,5,97,
		0,0,118,119,5,116,0,0,119,120,5,105,0,0,120,121,5,111,0,0,121,122,5,110,
		0,0,122,26,1,0,0,0,123,124,5,97,0,0,124,125,5,116,0,0,125,126,5,116,0,
		0,126,127,5,114,0,0,127,128,5,105,0,0,128,129,5,98,0,0,129,130,5,117,0,
		0,130,131,5,116,0,0,131,132,5,101,0,0,132,133,5,115,0,0,133,28,1,0,0,0,
		134,135,5,98,0,0,135,136,5,101,0,0,136,137,5,103,0,0,137,138,5,105,0,0,
		138,139,5,110,0,0,139,30,1,0,0,0,140,141,5,98,0,0,141,142,5,101,0,0,142,
		143,5,116,0,0,143,144,5,119,0,0,144,145,5,101,0,0,145,146,5,101,0,0,146,
		147,5,110,0,0,147,32,1,0,0,0,148,149,5,99,0,0,149,150,5,108,0,0,150,151,
		5,97,0,0,151,152,5,115,0,0,152,153,5,115,0,0,153,34,1,0,0,0,154,155,5,
		101,0,0,155,156,5,110,0,0,156,157,5,100,0,0,157,36,1,0,0,0,158,159,5,101,
		0,0,159,160,5,110,0,0,160,161,5,117,0,0,161,162,5,109,0,0,162,38,1,0,0,
		0,163,164,5,60,0,0,164,40,1,0,0,0,165,166,5,109,0,0,166,167,5,111,0,0,
		167,168,5,100,0,0,168,169,5,101,0,0,169,170,5,108,0,0,170,42,1,0,0,0,171,
		172,5,111,0,0,172,173,5,112,0,0,173,174,5,101,0,0,174,175,5,114,0,0,175,
		176,5,97,0,0,176,177,5,116,0,0,177,178,5,105,0,0,178,179,5,111,0,0,179,
		180,5,110,0,0,180,181,5,115,0,0,181,44,1,0,0,0,182,183,5,114,0,0,183,184,
		5,111,0,0,184,185,5,108,0,0,185,186,5,101,0,0,186,46,1,0,0,0,187,188,5,
		59,0,0,188,48,1,0,0,0,189,190,5,66,0,0,190,191,5,111,0,0,191,192,5,111,
		0,0,192,193,5,108,0,0,193,194,5,101,0,0,194,195,5,97,0,0,195,196,5,110,
		0,0,196,50,1,0,0,0,197,198,5,73,0,0,198,199,5,110,0,0,199,200,5,116,0,
		0,200,201,5,101,0,0,201,202,5,103,0,0,202,203,5,101,0,0,203,204,5,114,
		0,0,204,52,1,0,0,0,205,206,5,82,0,0,206,207,5,101,0,0,207,208,5,97,0,0,
		208,209,5,108,0,0,209,54,1,0,0,0,210,211,5,83,0,0,211,212,5,116,0,0,212,
		213,5,114,0,0,213,214,5,105,0,0,214,215,5,110,0,0,215,216,5,103,0,0,216,
		56,1,0,0,0,217,218,5,116,0,0,218,219,5,114,0,0,219,220,5,117,0,0,220,227,
		5,101,0,0,221,222,5,102,0,0,222,223,5,97,0,0,223,224,5,108,0,0,224,225,
		5,115,0,0,225,227,5,101,0,0,226,217,1,0,0,0,226,221,1,0,0,0,227,58,1,0,
		0,0,228,229,3,65,32,0,229,60,1,0,0,0,230,236,3,59,29,0,231,232,3,65,32,
		0,232,233,5,46,0,0,233,234,3,65,32,0,234,236,1,0,0,0,235,230,1,0,0,0,235,
		231,1,0,0,0,236,62,1,0,0,0,237,238,3,67,33,0,238,239,3,69,34,0,239,240,
		3,67,33,0,240,64,1,0,0,0,241,243,7,0,0,0,242,241,1,0,0,0,243,244,1,0,0,
		0,244,242,1,0,0,0,244,245,1,0,0,0,245,66,1,0,0,0,246,247,7,1,0,0,247,68,
		1,0,0,0,248,250,8,1,0,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,
		0,251,252,1,0,0,0,252,70,1,0,0,0,253,251,1,0,0,0,254,258,7,2,0,0,255,257,
		7,3,0,0,256,255,1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,
		0,259,72,1,0,0,0,260,258,1,0,0,0,261,265,5,35,0,0,262,264,8,4,0,0,263,
		262,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,268,1,
		0,0,0,267,265,1,0,0,0,268,269,6,36,0,0,269,74,1,0,0,0,270,272,7,5,0,0,
		271,270,1,0,0,0,272,273,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,275,
		1,0,0,0,275,276,6,37,0,0,276,76,1,0,0,0,8,0,226,235,244,251,258,265,273,
		1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace UseCodeGenerator.Use.SyntaxAnalizer
