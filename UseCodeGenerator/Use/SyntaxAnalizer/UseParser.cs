//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Assets/Use.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace UseCodeGenerator.Use.SyntaxAnalizer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class UseParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, ABSTRACT=12, ASSOCIATION=13, ATTRIBUTES=14, BEGIN=15, 
		BETWEEN=16, CLASS=17, END=18, ENUM=19, LT=20, MODEL=21, OPERATIONS=22, 
		ROLE=23, SEMICOLON=24, BOOLEAN=25, INTEGER=26, REAL=27, STRING=28, BOOLEAN_LITERAL=29, 
		INTEGER_LITERAL=30, REAL_LITERAL=31, STRING_LITERAL=32, ID=33, COMMENT=34, 
		WS=35;
	public const int
		RULE_startRule = 0, RULE_model = 1, RULE_modelName = 2, RULE_class = 3, 
		RULE_className = 4, RULE_inheritance = 5, RULE_attribute = 6, RULE_operation = 7, 
		RULE_parameter = 8, RULE_operationBody = 9, RULE_enumeration = 10, RULE_enumerationName = 11, 
		RULE_enumerationLiteral = 12, RULE_type = 13, RULE_typeLiteral = 14, RULE_simpleType = 15, 
		RULE_simpleTypeLiteral = 16, RULE_association = 17, RULE_multiplicity = 18;
	public static readonly string[] ruleNames = {
		"startRule", "model", "modelName", "class", "className", "inheritance", 
		"attribute", "operation", "parameter", "operationBody", "enumeration", 
		"enumerationName", "enumerationLiteral", "type", "typeLiteral", "simpleType", 
		"simpleTypeLiteral", "association", "multiplicity"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "':'", "'init'", "'='", "'('", "')'", "'{'", "'}'", "'['", 
		"'*'", "']'", "'abstract'", "'association'", "'attributes'", "'begin'", 
		"'between'", "'class'", "'end'", "'enum'", "'<'", "'model'", "'operations'", 
		"'role'", "';'", "'Boolean'", "'Integer'", "'Real'", "'String'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"ABSTRACT", "ASSOCIATION", "ATTRIBUTES", "BEGIN", "BETWEEN", "CLASS", 
		"END", "ENUM", "LT", "MODEL", "OPERATIONS", "ROLE", "SEMICOLON", "BOOLEAN", 
		"INTEGER", "REAL", "STRING", "BOOLEAN_LITERAL", "INTEGER_LITERAL", "REAL_LITERAL", 
		"STRING_LITERAL", "ID", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Use.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UseParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UseParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UseParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModelContext model() {
			return GetRuleContext<ModelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(UseParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext[] @class() {
			return GetRuleContexts<ClassContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext @class(int i) {
			return GetRuleContext<ClassContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationContext[] enumeration() {
			return GetRuleContexts<EnumerationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationContext enumeration(int i) {
			return GetRuleContext<EnumerationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociationContext[] association() {
			return GetRuleContexts<AssociationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociationContext association(int i) {
			return GetRuleContext<AssociationContext>(i);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(Context, State);
		EnterRule(_localctx, 0, RULE_startRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			model();
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 667648L) != 0)) {
				{
				State = 42;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ABSTRACT:
				case CLASS:
					{
					State = 39;
					@class();
					}
					break;
				case ENUM:
					{
					State = 40;
					enumeration();
					}
					break;
				case ASSOCIATION:
					{
					State = 41;
					association();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 47;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODEL() { return GetToken(UseParser.MODEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModelNameContext modelName() {
			return GetRuleContext<ModelNameContext>(0);
		}
		public ModelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterModel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitModel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelContext model() {
		ModelContext _localctx = new ModelContext(Context, State);
		EnterRule(_localctx, 2, RULE_model);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			Match(MODEL);
			State = 50;
			modelName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		public ModelNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterModelName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitModelName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelNameContext modelName() {
		ModelNameContext _localctx = new ModelNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_modelName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(UseParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(UseParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(UseParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritanceContext inheritance() {
			return GetRuleContext<InheritanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTES() { return GetToken(UseParser.ATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATIONS() { return GetToken(UseParser.OPERATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 6, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ABSTRACT) {
				{
				State = 54;
				Match(ABSTRACT);
				}
			}

			State = 57;
			Match(CLASS);
			State = 58;
			className();
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 59;
				inheritance();
				}
			}

			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ATTRIBUTES) {
				{
				State = 62;
				Match(ATTRIBUTES);
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 63;
					attribute();
					}
					}
					State = 68;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPERATIONS) {
				{
				State = 71;
				Match(OPERATIONS);
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 72;
					operation();
					}
					}
					State = 77;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 80;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(UseParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext[] className() {
			return GetRuleContexts<ClassNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className(int i) {
			return GetRuleContext<ClassNameContext>(i);
		}
		public InheritanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterInheritance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitInheritance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritanceContext inheritance() {
		InheritanceContext _localctx = new InheritanceContext(Context, State);
		EnterRule(_localctx, 10, RULE_inheritance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(LT);
			State = 85;
			className();
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 86;
				Match(T__0);
				State = 87;
				className();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeLiteralContext typeLiteral() {
			return GetRuleContext<TypeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UseParser.SEMICOLON, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(ID);
			State = 94;
			Match(T__1);
			State = 95;
			type();
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 96;
				Match(T__2);
				State = 97;
				Match(T__3);
				State = 98;
				typeLiteral();
				State = 99;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperationBodyContext operationBody() {
			return GetRuleContext<OperationBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 14, RULE_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(ID);
			State = 104;
			Match(T__4);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 105;
				parameter();
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 106;
					Match(T__0);
					}
				}

				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 114;
			Match(T__5);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 115;
				Match(T__1);
				State = 116;
				type();
				}
			}

			State = 119;
			operationBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 16, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(ID);
			State = 122;
			Match(T__1);
			State = 123;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(UseParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(UseParser.END, 0); }
		public OperationBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterOperationBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitOperationBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationBodyContext operationBody() {
		OperationBodyContext _localctx = new OperationBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_operationBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(BEGIN);
			State = 129;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 126;
					MatchWildcard();
					}
					} 
				}
				State = 131;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 132;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(UseParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationNameContext enumerationName() {
			return GetRuleContext<EnumerationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationLiteralContext[] enumerationLiteral() {
			return GetRuleContexts<EnumerationLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationLiteralContext enumerationLiteral(int i) {
			return GetRuleContext<EnumerationLiteralContext>(i);
		}
		public EnumerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterEnumeration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitEnumeration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationContext enumeration() {
		EnumerationContext _localctx = new EnumerationContext(Context, State);
		EnterRule(_localctx, 20, RULE_enumeration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(ENUM);
			State = 135;
			enumerationName();
			State = 136;
			Match(T__6);
			State = 137;
			enumerationLiteral();
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 138;
				Match(T__0);
				State = 139;
				enumerationLiteral();
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 145;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		public EnumerationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterEnumerationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitEnumerationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationNameContext enumerationName() {
		EnumerationNameContext _localctx = new EnumerationNameContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumerationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UseParser.ID, 0); }
		public EnumerationLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterEnumerationLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitEnumerationLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationLiteralContext enumerationLiteral() {
		EnumerationLiteralContext _localctx = new EnumerationLiteralContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumerationLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationNameContext enumerationName() {
			return GetRuleContext<EnumerationNameContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_type);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case INTEGER:
			case REAL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				simpleType();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152;
				enumerationName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeLiteralContext simpleTypeLiteral() {
			return GetRuleContext<SimpleTypeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationLiteralContext enumerationLiteral() {
			return GetRuleContext<EnumerationLiteralContext>(0);
		}
		public TypeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterTypeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitTypeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeLiteralContext typeLiteral() {
		TypeLiteralContext _localctx = new TypeLiteralContext(Context, State);
		EnterRule(_localctx, 28, RULE_typeLiteral);
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN_LITERAL:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155;
				simpleTypeLiteral();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156;
				enumerationLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(UseParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(UseParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(UseParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UseParser.STRING, 0); }
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_simpleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 503316480L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(UseParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(UseParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(UseParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(UseParser.STRING_LITERAL, 0); }
		public SimpleTypeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterSimpleTypeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitSimpleTypeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeLiteralContext simpleTypeLiteral() {
		SimpleTypeLiteralContext _localctx = new SimpleTypeLiteralContext(Context, State);
		EnterRule(_localctx, 32, RULE_simpleTypeLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8053063680L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSOCIATION() { return GetToken(UseParser.ASSOCIATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(UseParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(UseParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(UseParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicityContext multiplicity() {
			return GetRuleContext<MultiplicityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(UseParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(UseParser.END, 0); }
		public AssociationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_association; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterAssociation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitAssociation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociationContext association() {
		AssociationContext _localctx = new AssociationContext(Context, State);
		EnterRule(_localctx, 34, RULE_association);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(ASSOCIATION);
			State = 164;
			Match(ID);
			State = 165;
			Match(BETWEEN);
			State = 166;
			Match(ID);
			State = 167;
			multiplicity();
			State = 168;
			Match(ROLE);
			State = 169;
			Match(ID);
			State = 170;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicityContext : ParserRuleContext {
		public MultiplicityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.EnterMultiplicity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUseListener typedListener = listener as IUseListener;
			if (typedListener != null) typedListener.ExitMultiplicity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUseVisitor<TResult> typedVisitor = visitor as IUseVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicityContext multiplicity() {
		MultiplicityContext _localctx = new MultiplicityContext(Context, State);
		EnterRule(_localctx, 36, RULE_multiplicity);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(T__8);
			State = 175;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 175;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						State = 173;
						MatchWildcard();
						}
						break;
					case 2:
						{
						State = 174;
						Match(T__9);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 177;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 179;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,35,182,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,0,1,0,5,0,43,8,0,10,
		0,12,0,46,9,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,3,3,56,8,3,1,3,1,3,1,3,3,
		3,61,8,3,1,3,1,3,5,3,65,8,3,10,3,12,3,68,9,3,3,3,70,8,3,1,3,1,3,5,3,74,
		8,3,10,3,12,3,77,9,3,3,3,79,8,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,5,5,89,
		8,5,10,5,12,5,92,9,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,102,8,6,1,7,1,
		7,1,7,1,7,3,7,108,8,7,5,7,110,8,7,10,7,12,7,113,9,7,1,7,1,7,1,7,3,7,118,
		8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,5,9,128,8,9,10,9,12,9,131,9,9,1,9,
		1,9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,141,8,10,10,10,12,10,144,9,10,1,
		10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,3,13,154,8,13,1,14,1,14,3,14,158,
		8,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,18,1,18,1,18,4,18,176,8,18,11,18,12,18,177,1,18,1,18,1,18,2,129,177,
		0,19,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,0,2,1,0,25,28,
		1,0,29,32,182,0,38,1,0,0,0,2,49,1,0,0,0,4,52,1,0,0,0,6,55,1,0,0,0,8,82,
		1,0,0,0,10,84,1,0,0,0,12,93,1,0,0,0,14,103,1,0,0,0,16,121,1,0,0,0,18,125,
		1,0,0,0,20,134,1,0,0,0,22,147,1,0,0,0,24,149,1,0,0,0,26,153,1,0,0,0,28,
		157,1,0,0,0,30,159,1,0,0,0,32,161,1,0,0,0,34,163,1,0,0,0,36,172,1,0,0,
		0,38,44,3,2,1,0,39,43,3,6,3,0,40,43,3,20,10,0,41,43,3,34,17,0,42,39,1,
		0,0,0,42,40,1,0,0,0,42,41,1,0,0,0,43,46,1,0,0,0,44,42,1,0,0,0,44,45,1,
		0,0,0,45,47,1,0,0,0,46,44,1,0,0,0,47,48,5,0,0,1,48,1,1,0,0,0,49,50,5,21,
		0,0,50,51,3,4,2,0,51,3,1,0,0,0,52,53,5,33,0,0,53,5,1,0,0,0,54,56,5,12,
		0,0,55,54,1,0,0,0,55,56,1,0,0,0,56,57,1,0,0,0,57,58,5,17,0,0,58,60,3,8,
		4,0,59,61,3,10,5,0,60,59,1,0,0,0,60,61,1,0,0,0,61,69,1,0,0,0,62,66,5,14,
		0,0,63,65,3,12,6,0,64,63,1,0,0,0,65,68,1,0,0,0,66,64,1,0,0,0,66,67,1,0,
		0,0,67,70,1,0,0,0,68,66,1,0,0,0,69,62,1,0,0,0,69,70,1,0,0,0,70,78,1,0,
		0,0,71,75,5,22,0,0,72,74,3,14,7,0,73,72,1,0,0,0,74,77,1,0,0,0,75,73,1,
		0,0,0,75,76,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,78,71,1,0,0,0,78,79,1,
		0,0,0,79,80,1,0,0,0,80,81,5,18,0,0,81,7,1,0,0,0,82,83,5,33,0,0,83,9,1,
		0,0,0,84,85,5,20,0,0,85,90,3,8,4,0,86,87,5,1,0,0,87,89,3,8,4,0,88,86,1,
		0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,11,1,0,0,0,92,90,1,
		0,0,0,93,94,5,33,0,0,94,95,5,2,0,0,95,101,3,26,13,0,96,97,5,3,0,0,97,98,
		5,4,0,0,98,99,3,28,14,0,99,100,5,24,0,0,100,102,1,0,0,0,101,96,1,0,0,0,
		101,102,1,0,0,0,102,13,1,0,0,0,103,104,5,33,0,0,104,111,5,5,0,0,105,107,
		3,16,8,0,106,108,5,1,0,0,107,106,1,0,0,0,107,108,1,0,0,0,108,110,1,0,0,
		0,109,105,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,
		114,1,0,0,0,113,111,1,0,0,0,114,117,5,6,0,0,115,116,5,2,0,0,116,118,3,
		26,13,0,117,115,1,0,0,0,117,118,1,0,0,0,118,119,1,0,0,0,119,120,3,18,9,
		0,120,15,1,0,0,0,121,122,5,33,0,0,122,123,5,2,0,0,123,124,3,26,13,0,124,
		17,1,0,0,0,125,129,5,15,0,0,126,128,9,0,0,0,127,126,1,0,0,0,128,131,1,
		0,0,0,129,130,1,0,0,0,129,127,1,0,0,0,130,132,1,0,0,0,131,129,1,0,0,0,
		132,133,5,18,0,0,133,19,1,0,0,0,134,135,5,19,0,0,135,136,3,22,11,0,136,
		137,5,7,0,0,137,142,3,24,12,0,138,139,5,1,0,0,139,141,3,24,12,0,140,138,
		1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,145,1,0,0,
		0,144,142,1,0,0,0,145,146,5,8,0,0,146,21,1,0,0,0,147,148,5,33,0,0,148,
		23,1,0,0,0,149,150,5,33,0,0,150,25,1,0,0,0,151,154,3,30,15,0,152,154,3,
		22,11,0,153,151,1,0,0,0,153,152,1,0,0,0,154,27,1,0,0,0,155,158,3,32,16,
		0,156,158,3,24,12,0,157,155,1,0,0,0,157,156,1,0,0,0,158,29,1,0,0,0,159,
		160,7,0,0,0,160,31,1,0,0,0,161,162,7,1,0,0,162,33,1,0,0,0,163,164,5,13,
		0,0,164,165,5,33,0,0,165,166,5,16,0,0,166,167,5,33,0,0,167,168,3,36,18,
		0,168,169,5,23,0,0,169,170,5,33,0,0,170,171,5,18,0,0,171,35,1,0,0,0,172,
		175,5,9,0,0,173,176,9,0,0,0,174,176,5,10,0,0,175,173,1,0,0,0,175,174,1,
		0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,177,175,1,0,0,0,178,179,1,0,0,0,
		179,180,5,11,0,0,180,37,1,0,0,0,19,42,44,55,60,66,69,75,78,90,101,107,
		111,117,129,142,153,157,175,177
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace UseCodeGenerator.Use.SyntaxAnalizer
