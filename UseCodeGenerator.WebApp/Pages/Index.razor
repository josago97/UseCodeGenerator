@page "/"
@using System.IO.Compression
@using Blazor.DownloadFileFast.Interfaces
@using UseCodeGenerator.Core

<PageTitle>USE to language generator</PageTitle>

<main>
    <h1>USE to language generator</h1>

    <p>
        1. Select or dag and drop an USE file.
        <br />
        2. Choose the language programming.
        <br />
        3. Press the generate code button.
    </p>

    <UseInputFile OnChange="LoadFile" />

    <InputSelect @bind-Value=Language>
        <option value="@Language.CSharp">C#</option>
        <option value="@Language.Java">Java</option>
        <option value="@Language.Python">Python</option>
    </InputSelect>

    <button @onclick=GenerateCodeAsync>Generate code</button>
</main>

@code {
    private const string USE_EXTENSION = "use";

    [Inject]
    public IBlazorDownloadFileService DownloadFileService { get; set; }

    private IBrowserFile File { get; set; }
    private Language Language { get; set; }

    private void LoadFile(InputFileChangeEventArgs args)
    {
        File = args.File;
    }

    private async Task GenerateCodeAsync()
    {
        string fileExtenson = Path.GetExtension(File.Name);

        if (!fileExtenson.Equals(USE_EXTENSION, StringComparison.OrdinalIgnoreCase))
            return;

        Console.WriteLine("Leo archivo");
        using StreamReader fileReader = new StreamReader(File.OpenReadStream());
        string fileContent = await fileReader.ReadToEndAsync();

        Console.WriteLine("Genero archivos de codigo");
        CodeGenerator generator = new CodeGenerator();
        CodeFile[] files = await generator.GenerateCodeAsync(fileContent, Language);

        Console.WriteLine("Comprimo archivos");
        using MemoryStream stream = new MemoryStream();
        await CreateZipFileAsync(files, stream);

        Console.WriteLine("Descargo archivo comprimido");
        string fileName = $"{Path.GetFileNameWithoutExtension(File.Name)}.zip";
        await DownloadFileService.DownloadFileAsync(fileName, stream.ToArray());
    }

    private async Task CreateZipFileAsync(CodeFile[] files, Stream outStream)
    {
        using ZipArchive archive = new ZipArchive(outStream, ZipArchiveMode.Create);

        foreach (CodeFile file in files)
        {
            ZipArchiveEntry entry = archive.CreateEntry(file.FullName);
            using StreamWriter writer = new StreamWriter(entry.Open());
            await writer.WriteAsync(file.Content);
        }
    }
}